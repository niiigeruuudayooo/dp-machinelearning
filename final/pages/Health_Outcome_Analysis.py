# -*- coding: utf-8 -*-
"""pages/3_Health_Outcome_Analysis_Resource.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1idNqJqdLFQFB4Be7s2Wz8kRtRZQ33ilu
"""

# pages/3_ðŸ“„_Health_Outcome_Analysis_Resource.py
# Displays the specific PM2.5 vs Health Outcome analysis

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.api as sm
import numpy as np
import traceback

# --- Page Configuration (Optional) ---
# st.set_page_config(page_title="Health Analysis Resource")

st.title("ðŸ“„ Resource: Health Outcome Analysis (PMâ‚‚.â‚… Focus)")
st.markdown("""
This page details the specific analysis exploring the relationship between
Fine Particulate Matter (PMâ‚‚.â‚…) concentrations and health outcomes
(Asthma ED Visits and Respiratory Hospitalizations) using cleaned, aggregated data.
""")

# --- Data Loading ---
@st.cache_data # Cache the loaded data for this page
def load_cleaned_data(file_path='data/cleaned_health_outcome.csv'):
    """Loads the pre-cleaned health outcome vs PM2.5 data."""
    try:
        df = pd.read_csv(file_path)
        # Check for required columns for this specific analysis
        required = ["PM2.5", "AsthmaRate", "RespiratoryRate"]
        if not all(col in df.columns for col in required):
            st.error(f"Error: File '{file_path}' is missing required columns: {required}")
            return None
        print("Cleaned health outcome data loaded successfully for resource page.")
        return df
    except FileNotFoundError:
        st.error(f"Error: Required file '{file_path}' not found.")
        st.error("Please ensure the 'cleaned_health_outcome.csv' file exists in the main project directory.")
        return None
    except Exception as e:
        st.error(f"An error occurred loading data: {e}")
        return None

df_health = load_cleaned_data()

if df_health is not None and not df_health.empty:

    # --- Correlation Analysis ---
    st.header("Correlation Analysis")
    with st.spinner("Calculating correlations..."):
        try:
            correlation_df = df_health[["PM2.5", "AsthmaRate", "RespiratoryRate"]]
            correlation_matrix = correlation_df.corr()

            col1, col2 = st.columns([1, 2]) # Layout for matrix and heatmap
            with col1:
                st.subheader("Correlation Matrix:")
                st.dataframe(correlation_matrix.style.format("{:.3f}"))
            with col2:
                st.subheader("Correlation Heatmap:")
                fig_corr, ax_corr = plt.subplots(figsize=(6, 5)) # Adjusted size
                sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f", ax=ax_corr)
                plt.title("PMâ‚‚.â‚… vs Health Outcomes Correlation")
                st.pyplot(fig_corr)
        except Exception as e:
            st.error(f"Failed to generate correlation analysis: {e}")

    st.markdown("---")

    # --- Regression Analysis Section ---
    st.header("Regression Analysis: PMâ‚‚.â‚… as Predictor")

    # Select outcome for detailed view
    outcome_choice = st.radio(
        "Select Health Outcome for Detailed Regression:",
        ("Asthma ED Visits Rate", "Respiratory Hospitalization Rate (Age 20+)"),
        key="resource_outcome_select",
        horizontal=True
    )

    outcome_col_map = {
        "Asthma ED Visits Rate": "AsthmaRate",
        "Respiratory Hospitalization Rate (Age 20+)": "RespiratoryRate"
    }
    selected_col = outcome_col_map[outcome_choice]
    y = df_health[selected_col]
    X = sm.add_constant(df_health["PM2.5"]) # Add constant for intercept

    tab_ols, tab_glm, tab_plot = st.tabs(["OLS Summary", "GLM Summary", "GLM Plot"])

    with st.spinner(f"Running regression for {outcome_choice}..."):
        try:
            # --- OLS Regression ---
            ols_model = sm.OLS(y, X).fit()
            with tab_ols:
                st.subheader(f"OLS Regression: PMâ‚‚.â‚… -> {outcome_choice}")
                st.text(ols_model.summary())

            # --- GLM Regression ---
            glm_model = sm.GLM(y, X, family=sm.families.Gaussian()).fit()
            df_health[f"GLM_Pred_{selected_col}"] = glm_model.predict(X) # Add predictions for plot
            with tab_glm:
                st.subheader(f"GLM Regression: PMâ‚‚.â‚… -> {outcome_choice}")
                st.text(glm_model.summary())

            # --- Plot GLM Smoothed Prediction ---
            with tab_plot:
                st.subheader(f"GLM Smoothed Plot: PMâ‚‚.â‚… vs {outcome_choice}")
                # Bin PM2.5 values for smoother plotting
                df_health["PM_bin"] = pd.cut(df_health["PM2.5"], bins=30)
                bin_means = df_health.groupby("PM_bin", observed=False)[["PM2.5", selected_col, f"GLM_Pred_{selected_col}"]].mean()

                fig_glm, ax_glm = plt.subplots(figsize=(10, 6))
                sns.scatterplot(data=df_health, x="PM2.5", y=selected_col, label="Observed", alpha=0.3, ax=ax_glm)
                sns.lineplot(data=bin_means, x="PM2.5", y=f"GLM_Pred_{selected_col}", color="green", label="GLM Smoothed", ax=ax_glm)
                ax_glm.set_title(f"GLM: PMâ‚‚.â‚… vs {outcome_choice}")
                ax_glm.set_xlabel("PMâ‚‚.â‚… Concentration")
                ax_glm.set_ylabel(outcome_choice)
                ax_glm.legend()
                ax_glm.grid(True, alpha=0.3)
                plt.tight_layout()
                st.pyplot(fig_glm)

        except Exception as e:
            st.error(f"Failed to run regression analysis for {outcome_choice}: {e}")
            st.error(traceback.format_exc())

    st.markdown("---")
    st.subheader("Analysis Summary")
    st.markdown("""
    * **Significance:** The p-values for PMâ‚‚.â‚… in all models are less than 0.001, confirming a strong association.
    * **Effect Size (Asthma):** For every unit increase in PMâ‚‚.â‚…, the asthma rate increases by approx. 9.47 units.
    * **Effect Size (Respiratory):** For every unit increase in PMâ‚‚.â‚…, the respiratory rate increases by approx. 0.87 units.
    * **Model Fit:** R-squared values (~0.07 for Asthma, ~0.06 for Respiratory) indicate PMâ‚‚.â‚… explains a modest variation, but its significance is consistent.
    * **Visualization:** The GLM plots show a clear upward trend between PMâ‚‚.â‚… levels and adverse health indicators.
    """)

else:
    st.error("Could not load the necessary data file ('cleaned_health_outcome.csv') to display this analysis.")
