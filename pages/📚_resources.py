# -*- coding: utf-8 -*-
"""pages/2_📚_Resources.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1n5clIMt2sOb47WCnWhzs7KkavIoXXtxa
"""

# pages/2_📚_Resources.py

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.api as sm
import numpy as np
import traceback

# --- Page Configuration ---
st.set_page_config(layout="wide", page_title="Analysis Resources") # Set config for this page if needed

st.title("📚 Analysis Resources")
st.markdown("Select an analysis below to view the details.")

# --- Define Functions for Each Analysis ---
# (We'll put the health outcome analysis code in its function)

@st.cache_data # Cache the loaded data for this analysis
def load_cleaned_health_data(file_path='./cleaned_health_outcome.csv'):
    """Loads the pre-cleaned health outcome vs PM2.5 data."""
    try:
        df = pd.read_csv(file_path)
        required = ["PM2.5", "AsthmaRate", "RespiratoryRate"]
        if not all(col in df.columns for col in required):
            st.error(f"Error: File '{file_path}' is missing required columns: {required}")
            return None
        return df
    except FileNotFoundError:
        st.error(f"Error: Required file '{file_path}' not found in the main project directory.")
        return None
    except Exception as e:
        st.error(f"An error occurred loading data: {e}")
        return None

def display_health_outcome_analysis():
    """Displays the PM2.5 vs Health Outcome Analysis."""
    st.header("Health Outcome Analysis (PM₂.₅ Focus)")
    st.markdown("Detailed analysis exploring the relationship between PM₂.₅ and health outcomes.")

    df_health = load_cleaned_health_data()

    if df_health is not None and not df_health.empty:
        # --- Correlation Analysis ---
        st.subheader("Correlation Analysis")
        with st.spinner("Calculating correlations..."):
            try:
                correlation_df = df_health[["PM2.5", "AsthmaRate", "RespiratoryRate"]]
                correlation_matrix = correlation_df.corr()
                col1, col2 = st.columns([1, 2])
                with col1:
                    st.caption("Correlation Matrix:")
                    st.dataframe(correlation_matrix.style.format("{:.3f}"))
                with col2:
                    st.caption("Correlation Heatmap:")
                    fig_corr, ax_corr = plt.subplots(figsize=(6, 5))
                    sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f", ax=ax_corr)
                    plt.title("PM₂.₅ vs Health Outcomes Correlation")
                    st.pyplot(fig_corr)
            except Exception as e: st.error(f"Correlation analysis failed: {e}")

        st.markdown("---")
        # --- Regression Analysis Section ---
        st.subheader("Regression Analysis: PM₂.₅ as Predictor")
        outcome_choice = st.radio(
            "Select Health Outcome for Detailed Regression:",
            ("Asthma ED Visits Rate", "Respiratory Hospitalization Rate (Age 20+)"),
            key="resource_outcome_select_reg", # Unique key
            horizontal=True
        )
        outcome_col_map = {
            "Asthma ED Visits Rate": "AsthmaRate",
            "Respiratory Hospitalization Rate (Age 20+)": "RespiratoryRate"
        }
        selected_col = outcome_col_map[outcome_choice]

        # Prepare data safely
        if selected_col not in df_health.columns or "PM2.5" not in df_health.columns:
             st.error(f"Required columns for regression ('PM2.5', '{selected_col}') not found.")
             return # Stop this section if columns missing

        df_reg = df_health[["PM2.5", selected_col]].dropna() # Drop NA for this specific pair
        if len(df_reg) < 2:
             st.warning(f"Not enough data points to run regression for {outcome_choice}.")
             return # Stop if not enough data

        y = df_reg[selected_col]
        X = sm.add_constant(df_reg["PM2.5"])

        tab_ols, tab_glm, tab_plot = st.tabs(["OLS Summary", "GLM Summary", "GLM Plot"])

        with st.spinner(f"Running regression for {outcome_choice}..."):
            try:
                ols_model = sm.OLS(y, X).fit()
                with tab_ols: st.text(ols_model.summary())

                glm_model = sm.GLM(y, X, family=sm.families.Gaussian()).fit()
                df_reg[f"GLM_Pred_{selected_col}"] = glm_model.predict(X) # Add predictions for plot
                with tab_glm: st.text(glm_model.summary())

                with tab_plot:
                    df_reg["PM_bin"] = pd.cut(df_reg["PM2.5"], bins=30)
                    bin_means = df_reg.groupby("PM_bin", observed=False)[["PM2.5", selected_col, f"GLM_Pred_{selected_col}"]].mean()

                    fig_glm, ax_glm = plt.subplots(figsize=(10, 6))
                    sns.scatterplot(data=df_reg, x="PM2.5", y=selected_col, label="Observed", alpha=0.3, ax=ax_glm)
                    sns.lineplot(data=bin_means, x="PM2.5", y=f"GLM_Pred_{selected_col}", color="green", label="GLM Smoothed", ax=ax_glm)
                    ax_glm.set_title(f"GLM: PM₂.₅ vs {outcome_choice}")
                    ax_glm.set_xlabel("PM₂.₅ Concentration")
                    ax_glm.set_ylabel(outcome_choice)
                    ax_glm.legend()
                    ax_glm.grid(True, alpha=0.3)
                    plt.tight_layout()
                    st.pyplot(fig_glm)

            except Exception as e:
                st.error(f"Failed regression analysis for {outcome_choice}: {e}")
                st.error(traceback.format_exc())

        st.markdown("---")
        st.caption("Analysis Summary") # Use caption for less emphasis
        st.markdown("""
        * **Significance:** P-values for PM₂.₅ < 0.001 indicate a strong association.
        * **Effect Size:** Asthma rate increases by ~9.47 units, Respiratory rate by ~0.87 units per unit increase in PM₂.₅.
        * **Model Fit:** R² values (~0.07) are modest, but significance is consistent.
        * **Visualization:** Plots show a clear upward trend between PM₂.₅ and health issues.
        """)
    else:
        st.error("Could not display analysis because the required data file ('cleaned_health_outcome.csv') failed to load.")

# --- Add functions for other resource analyses here ---
# def display_pollutant_source_analysis():
#     st.header("Pollutant Source Analysis")
#     st.write("Details about boiler emissions, etc.")
#     # Add relevant code, plots, data loading

# def display_data_cleaning_details():
#     st.header("Data Cleaning Process")
#     st.write("Explanation of preprocessing steps.")
#     # Add relevant code snippets or descriptions

# --- Resource Selection ---
# Use columns for a cleaner button layout
col1, col2, col3 = st.columns(3)

with col1:
    if st.button("🩺 Health Outcome Analysis (PM₂.₅ Focus)", use_container_width=True):
        st.session_state.selected_resource = 'health'

with col2:
    if st.button("🏭 Trend:Air Pollutants Over Time (Example)", use_container_width=True):
        st.session_state.selected_resource = 'trend' # Example identifier

with col3:
    if st.button(" K-means Machine Learning Model(Example)", use_container_width=True):
        st.session_state.selected_resource = 'modeling' # Example identifier


# Add more buttons/columns for other resources

st.markdown("---")

# --- Display Selected Resource ---
selected = st.session_state.get('selected_resource', None) # Get selected resource from state

if selected == 'health':
    display_health_outcome_analysis()
elif selected == 'trend':
    st.header("Air Pollutants Over Time")
    st.write("Placeholder for details about pollutant sources.")
    # display_pollutant_source_analysis() # Call the function when implemented
elif selected == 'modeling':
    st.header("K-means Machine Learning Model")
    st.write("Placeholder for details about K-means Machine Learning Model.")
    # display_data_modeling_details() # Call the function when implemented
elif selected is not None:
    st.warning("Selected resource not yet implemented.")

# Add a way to clear the selection if needed
if selected:
    if st.button("Clear Selection / Hide Details"):
        st.session_state.selected_resource = None
        st.rerun()
